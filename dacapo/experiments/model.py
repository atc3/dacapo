import torch


class Model(torch.nn.Module):
    """A trainable DaCapo model. Consists of an ``Architecture`` and a
    prediction head. Models are generated by ``Predictor``s.
    """

    def __init__(self, architecture, prediction_head):

        super().__init__()

        self.architecture = architecture
        self.prediction_head = prediction_head
        self.chain = torch.nn.Sequential(
            architecture,
            prediction_head)
        self.num_in_channels = architecture.num_in_channels

    def forward(self, x):
        return self.chain(x)

    def compute_output_shape(self, input_shape):
        """Compute the spatial shape (i.e., not accounting for channels and
        batch dimensions) of this model, when fed a tensor of the given spatial
        shape as input."""

        return self.__get_output_shape(input_shape, self.num_in_channels)

    def get_state(self):
        """Get the parameters of this model as a state dict."""

        return self.state_dict()

    def set_state(self, state_dict):
        """Set the parameters of this model from a state dict."""

        self.load_state_dict(state_dict)

    def __get_output_shape(self, input_shape, in_channels):

        device = "cpu"
        for parameter in self.parameters():
            device = parameter.device
            break

        dummy_data = torch.zeros((1, in_channels) + input_shape, device=device)
        out = self.forward(dummy_data)
        return tuple(out.shape[2:])
